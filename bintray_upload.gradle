/*
 * Copyright (c) 2017   Mathijs Lagerberg, Pixplicity BV
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = GROUP
version = VERSION_NAME

bintray {
    user = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : "empty"
    key = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : "empty"

    configurations = ['archives']

    publish = true

    pkg {
        repo = 'android'
        userOrg = 'milkcan'
        name = ARTIFACT_ID
        desc = POM_DESCRIPTION
        issueTrackerUrl = POM_ISSUE_URL
        vcsUrl = POM_URL
        licenses = ['Apache-2.0']
        labels = ['android']
        publicDownloadNumbers = true
        dryRun = false // Whether to run this as dry-run, without deploying
        publish = false // If version should be auto published after an bintray_upload
        version {
            name = VERSION_NAME
            released  = new Date()
            desc = "Gene-rate library stable release ${VERSION_NAME}"
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {

                packaging 'aar'
                name project.name
                url POM_URL
                description POM_DESCRIPTION

                groupId GROUP
                artifactId 'library'
                version VERSION_NAME

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID_0
                        name POM_DEVELOPER_NAME_0
                        email POM_DEVELOPER_EMAIL_0
                    }
                }
                scm {
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                    url POM_URL
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}